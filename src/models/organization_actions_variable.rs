/*
 * GitHub's official OpenAPI spec + Octokit extension
 *
 * OpenAPI specs from https://github.com/github/rest-api-description with the 'x-octokit' extension required by the Octokit SDKs
 *
 * The version of the OpenAPI document: 16.6.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OrganizationActionsVariable : Organization variable for GitHub Actions.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrganizationActionsVariable {
    /// The name of the variable.
    #[serde(rename = "name")]
    pub name: String,
    /// The value of the variable.
    #[serde(rename = "value")]
    pub value: String,
    /// The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// Visibility of a variable
    #[serde(rename = "visibility")]
    pub visibility: Visibility,
    #[serde(rename = "selected_repositories_url", skip_serializing_if = "Option::is_none")]
    pub selected_repositories_url: Option<String>,
}

impl OrganizationActionsVariable {
    /// Organization variable for GitHub Actions.
    pub fn new(name: String, value: String, created_at: String, updated_at: String, visibility: Visibility) -> OrganizationActionsVariable {
        OrganizationActionsVariable {
            name,
            value,
            created_at,
            updated_at,
            visibility,
            selected_repositories_url: None,
        }
    }
}
/// Visibility of a variable
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Visibility {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "private")]
    Private,
    #[serde(rename = "selected")]
    Selected,
}

impl Default for Visibility {
    fn default() -> Visibility {
        Self::All
    }
}

