/*
 * GitHub's official OpenAPI spec + Octokit extension
 *
 * OpenAPI specs from https://github.com/github/rest-api-description with the 'x-octokit' extension required by the Octokit SDKs
 *
 * The version of the OpenAPI document: 16.6.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CodespacesSecret : Secrets for a GitHub Codespace.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodespacesSecret {
    /// The name of the secret
    #[serde(rename = "name")]
    pub name: String,
    /// The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// The date and time at which the secret was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// The type of repositories in the organization that the secret is visible to
    #[serde(rename = "visibility")]
    pub visibility: Visibility,
    /// The API URL at which the list of repositories this secret is visible to can be retrieved
    #[serde(rename = "selected_repositories_url")]
    pub selected_repositories_url: String,
}

impl CodespacesSecret {
    /// Secrets for a GitHub Codespace.
    pub fn new(name: String, created_at: String, updated_at: String, visibility: Visibility, selected_repositories_url: String) -> CodespacesSecret {
        CodespacesSecret {
            name,
            created_at,
            updated_at,
            visibility,
            selected_repositories_url,
        }
    }
}
/// The type of repositories in the organization that the secret is visible to
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Visibility {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "private")]
    Private,
    #[serde(rename = "selected")]
    Selected,
}

impl Default for Visibility {
    fn default() -> Visibility {
        Self::All
    }
}

