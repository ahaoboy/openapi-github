/*
 * GitHub's official OpenAPI spec + Octokit extension
 *
 * OpenAPI specs from https://github.com/github/rest-api-description with the 'x-octokit' extension required by the Octokit SDKs
 *
 * The version of the OpenAPI document: 16.6.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WebhookInstallationNewPermissionsAccepted {
    #[serde(rename = "action")]
    pub action: Action,
    #[serde(rename = "enterprise", skip_serializing_if = "Option::is_none")]
    pub enterprise: Option<Box<models::EnterpriseWebhooks>>,
    #[serde(rename = "installation")]
    pub installation: Box<models::Installation>,
    #[serde(rename = "organization", skip_serializing_if = "Option::is_none")]
    pub organization: Option<Box<models::OrganizationSimpleWebhooks>>,
    /// An array of repository objects that the installation can access.
    #[serde(rename = "repositories", skip_serializing_if = "Option::is_none")]
    pub repositories: Option<Vec<models::WebhooksRepositoriesInner>>,
    #[serde(rename = "repository", skip_serializing_if = "Option::is_none")]
    pub repository: Option<Box<models::RepositoryWebhooks>>,
    #[serde(rename = "requester", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub requester: Option<Option<serde_json::Value>>,
    #[serde(rename = "sender")]
    pub sender: Box<models::SimpleUserWebhooks>,
}

impl WebhookInstallationNewPermissionsAccepted {
    pub fn new(action: Action, installation: models::Installation, sender: models::SimpleUserWebhooks) -> WebhookInstallationNewPermissionsAccepted {
        WebhookInstallationNewPermissionsAccepted {
            action,
            enterprise: None,
            installation: Box::new(installation),
            organization: None,
            repositories: None,
            repository: None,
            requester: None,
            sender: Box::new(sender),
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "new_permissions_accepted")]
    NewPermissionsAccepted,
}

impl Default for Action {
    fn default() -> Action {
        Self::NewPermissionsAccepted
    }
}

