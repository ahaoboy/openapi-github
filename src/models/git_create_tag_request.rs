/*
 * GitHub's official OpenAPI spec + Octokit extension
 *
 * OpenAPI specs from https://github.com/github/rest-api-description with the 'x-octokit' extension required by the Octokit SDKs
 *
 * The version of the OpenAPI document: 16.6.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitCreateTagRequest {
    /// The tag's name. This is typically a version (e.g., \"v0.0.1\").
    #[serde(rename = "tag")]
    pub tag: String,
    /// The tag message.
    #[serde(rename = "message")]
    pub message: String,
    /// The SHA of the git object this is tagging.
    #[serde(rename = "object")]
    pub object: String,
    /// The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "tagger", skip_serializing_if = "Option::is_none")]
    pub tagger: Option<Box<models::GitCreateTagRequestTagger>>,
}

impl GitCreateTagRequest {
    pub fn new(tag: String, message: String, object: String, r#type: Type) -> GitCreateTagRequest {
        GitCreateTagRequest {
            tag,
            message,
            object,
            r#type,
            tagger: None,
        }
    }
}
/// The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "commit")]
    Commit,
    #[serde(rename = "tree")]
    Tree,
    #[serde(rename = "blob")]
    Blob,
}

impl Default for Type {
    fn default() -> Type {
        Self::Commit
    }
}

