/*
 * GitHub's official OpenAPI spec + Octokit extension
 *
 * OpenAPI specs from https://github.com/github/rest-api-description with the 'x-octokit' extension required by the Octokit SDKs
 *
 * The version of the OpenAPI document: 16.6.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RepositoryRulesetConditionsRepositoryNameTargetRepositoryName {
    /// Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
    #[serde(rename = "include", skip_serializing_if = "Option::is_none")]
    pub include: Option<Vec<String>>,
    /// Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
    #[serde(rename = "exclude", skip_serializing_if = "Option::is_none")]
    pub exclude: Option<Vec<String>>,
    /// Whether renaming of target repositories is prevented.
    #[serde(rename = "protected", skip_serializing_if = "Option::is_none")]
    pub protected: Option<bool>,
}

impl RepositoryRulesetConditionsRepositoryNameTargetRepositoryName {
    pub fn new() -> RepositoryRulesetConditionsRepositoryNameTargetRepositoryName {
        RepositoryRulesetConditionsRepositoryNameTargetRepositoryName {
            include: None,
            exclude: None,
            protected: None,
        }
    }
}

